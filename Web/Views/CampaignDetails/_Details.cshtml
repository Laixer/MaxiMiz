@*
    Partial view containing the details of a campaign.
*@

@model CampaignDetailsViewModel
<!-- View for the details of a campaign -->
<div class="modal-body">
    <!-- Navigation tab items -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <span class="nav-link active" data-target="#tabAccount" data-toggle="tab">Account</span>
        </li>
        <li class="nav-item">
            <span class="nav-link" data-target="#tabMarketing" data-toggle="tab">Marketing</span>
        </li>
        <li class="nav-item">
            <span class="nav-link" data-target="#tabTargeting" data-toggle="tab">Targeting</span>
        </li>
        <li class="nav-item">
            <span class="nav-link" data-target="#tabSchedule" data-toggle="tab">Schedule</span>
        </li>
        <li class="nav-item">
            <span class="nav-link" data-target="#tabAdGroups" data-toggle="tab">Ad Groups</span>
        </li>
    </ul>

    <!-- Modifications exist in their own form -->
    <!-- Each input field explicitly points to this form -->
    <!-- This is required because we need some other forms in these tabs, and can't have forms in forms -->
    <form id="formCampaignDetailsModifications" asp-controller="CampaignDetails" asp-action="@nameof(CampaignDetailsController.PostModificationForm)" method="post">
        <!-- Hidden input to post form data -->
        <input type="hidden" name="@nameof(FormCampaignDetailsViewModel.CampaignId)" value="@Model.Campaign.Id" />
    </form>

    <!-- Tab contents with partial views for each tab -->
    <div class="tab-content">
        <div class="tab-pane active" id="tabAccount">
            <partial name="_DetailsAccount" model="@Model" />
        </div>
        <div class="tab-pane" id="tabMarketing">
            <partial name="_DetailsMarketing" model="@Model" />
        </div>
        <div class="tab-pane" id="tabTargeting">
            <partial name="_DetailsTargeting" model="@Model" />
        </div>
        <div class="tab-pane" id="tabSchedule">
            <partial name="_DetailsSchedule" model="@Model" />
        </div>
        <div class="tab-pane" id="tabAdGroups">
            <partial name="_DetailsAdGroups" model="@Model" />
        </div>
    </div>

</div>

<!-- Footer of our modal -->
<!-- TODO Do we want this? -->
<div class="modal-footer justify-content-start">
    <button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fas fa-long-arrow-alt-right"></i></button>
</div>

<!-- Script functionality for our campaign details partial views -->
<!-- Import validation rules -->
<partial name="_DetailsValidationRules" />

<script type="text/javascript">

    // Initialize our validator object
    setupValidatorDefaults();
    var validatorCampaignDetailsAccount = $('#formTabAccount').validate();
    var validatorCampaignDetailsMarketing = $('#formTabMarketing').validate();
    var validatorCampaignDetailsTargeting = $('#formTabTargeting').validate();
    var validatorCampaignDetailsSchedule = $('#formTabSchedule').validate();

    // Explicitly define all elements that have to be validated for each section
    // TODO These might be useful to indicate which tab is incorrect upon form validation
    // The user might not be in the tab where our properties are invalid
    var elementsAccount = [
        '#inputCampaignNameSuffix',
        '#inputBrandingText',
        '#inputUrl',
        '#inputUtmCustom'
    ];
    var elementsMarketing = [
        '#checkboxAutopilot',
        '#inputCpc',
        '.radioBidStrategy',
        '.radioDelivery',
        '#inputBudget',
        '#selectBudgetModel',
        '#inputBudgetDaily',
        '#inputBudgetDailyInfinite'
    ];
    var elementsTargeting = [
        '.checkboxLocation',
        '.checkboxDevice',
        '.checkboxOperatingSystem'
    ];
    var elementsSchedule = [
        '#datetimeStartDate',
        '#datetimeEndDate',
        '#checkboxIgnoreEndDate'
    ];

    $(document).ready(function () {

        // Do not post our forms by default ever
        // TODO Maybe do this with a class?
        subscribeFormSubmit('#formCampaignDetailsModifications');
        subscribeFormSubmit('#formTabAccount');
        subscribeFormSubmit('#formTabMarketing');
        subscribeFormSubmit('#formTabTargeting');
        subscribeFormSubmit('#formTabSchedule');

        // Register our save buttons
        subscribeClickable('.buttonSaveCampaignDetails', function () {
            // Do non-lazy evaluation to enuse all items are checked
            // These can also be done with validateSet
            if (validatorCampaignDetailsAccount.form() &
                validatorCampaignDetailsMarketing.form() &
                validatorCampaignDetailsTargeting.form() &
                validatorCampaignDetailsSchedule.form()) {
                postFormCampaignDetails();
            }
        });

    });

    // Submit the form
    function postFormCampaignDetails() {
        // Visual feedback
        var htmlOriginal = $('.buttonSaveCampaignDetails').html();
        $('.buttonSaveCampaignDetails').attr('disabled', 'disabled');
        setLoadingIconTo('.buttonSaveCampaignDetailsForm');

        // Save original html
        var originalForm = $('#formCampaignDetailsModifications').html();

        // Append all form pages to single form, to avoid messing with the validation tokens
        $('#formCampaignDetailsModifications').append($('#formTabAccount fieldset').clone());
        $('#formCampaignDetailsModifications').append($('#formTabMarketing fieldset').clone());
        $('#formCampaignDetailsModifications').append($('#formTabTargeting fieldset').clone());
        $('#formCampaignDetailsModifications').append($('#formTabSchedule fieldset').clone());

        // Serialize before disabling elements
        var jsonBody = $('#formCampaignDetailsModifications').serializeFormJSON();

        // TODO This is a beunfix
        // Single items don't get put in an array and are not model bound correctly
        // This is due to our form to json functionality (it seems)
        makeArrayIfSingleString(jsonBody, 'Locations');
        makeArrayIfSingleString(jsonBody, 'Devices');
        makeArrayIfSingleString(jsonBody, 'OperatingSystems');

        // Restore form and disable elements
        $('#formCampaignDetailsModifications').html(originalForm);
        updateEnabledSet(getAllElements(), false);

        // Post the form and handle the response
        var action = $('#formCampaignDetailsModifications').get(0).action;
        doPostAndProcess(action, jsonBody, function () {
            $('.buttonSaveCampaignDetails').html(htmlOriginal);
            $('.buttonSaveCampaignDetails').removeAttr('disabled');
            updateEnabledSet(getAllElements(), true);

            // TODO How are we going to feedback success to the user?
            // TODO What if we fail?
            // TODO What if there is a timeout?
        });
    }

    // Returns all present form elements
    function getAllElements() {
        return elementsAccount
            .concat(elementsMarketing)
            .concat(elementsTargeting)
            .concat(elementsSchedule);
    }

</script>