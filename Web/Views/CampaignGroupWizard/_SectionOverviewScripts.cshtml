@*
    Contains our script functionality for the overview panel.
    TODO Do we want this here?
*@

@inject ICurrencyViewModelService currencyService;

<script type="text/javascript">

    $(document).ready(function () {

        // Register our post button
        subscribeClickable('#buttonSubmitWizard', clickSubmit);

        // Subscribe tab enter event
        $(document).on('click', '.clickToRefreshOverview', onEnterOverviewTab);

    });

    // Gets all values from the form and displays them in the correct format
    function onEnterOverviewTab() {
        retrieveAllFormValues();
        if (validateEntireWizard() === true) {
            updateSubmitFeedback(true);
        } else {
            updateSubmitFeedback(false);
        }
    }

    // Function for the submit wizard click event
    function clickSubmit() {
        if (validateEntireWizard() === true) {
            submitWizard();
        } else {
            updateSubmitFeedback(false);
        }
    };

    // Submit the form
    function submitWizard() {
        // Visual feedback
        let htmlOriginal = $('#buttonSubmitWizard').html();
        $('#buttonSubmitWizard').attr('disabled', 'disabled');
        setLoadingIconTo('#buttonSubmitWizard');
        $('.buttonBack').attr('disabled', 'disabled');

        // TODO Disable tabs

        // Post the form and handle the response
        let callbackSuccess = () => {
            $('#buttonSubmitWizard').html(htmlOriginal);
            $('#buttonSubmitWizard').removeAttr('disabled');
            $('.buttonBack').removeAttr('disabled');

            // TODO How are we going to feedback success to the user?
        };
        let callbackFailure = () => {
            $('#buttonSubmitWizard').html(htmlOriginal);
            $('#buttonSubmitWizard').removeAttr('disabled');
            $('.buttonBack').removeAttr('disabled');

            // TODO Do this at one place
            // TODO What do we tell the user?
            $('#divSubmitFeedback').text('Something went wrong submitting the campaign group. Please check your fields.');
        };
        doPostFormAndProcess('#formWizard', callbackSuccess, [], callbackFailure, []);
    }

    // Sets our feedback div text and submit button state according to the current form validity.
    // TODO This is beun, but don't implement unwanted features. Will be updated!
    function updateSubmitFeedback(valid) {
        if (valid === true) {
            $('#buttonSubmitWizard').removeAttr('disabled');
            $('#divSubmitFeedback').text('Looks good, ready to submit.');
        } else if (valid === false) {
            $('#buttonSubmitWizard').attr('disabled', 'disabled');
            $('#divSubmitFeedback').text('Specified values are invalid, please check your tabs.');
        } else {
            // TODO Question Is it correct to log like this?
            console.log('Invalid parameter specified for "valid", must be a boolean');
        }
    }

    function retrieveAllFormValues() {
        // Account tab
        $('#displayPublishers').html(extractFromCheckableGroup('.checkboxPublisher'));
        $('#displayAccountName').html(extractFromSelect('#selectAccountTaboola'));
        $('#displayCampaignNameSuffix').html(extractFromLabel('#inputCampaignNameSuffix'));
        $('#displayBrandingText').html(extractFromLabel('#inputBrandingText'));
        $('#displayUrl').html(extractFromLabel('#inputUrl'));
        $('#displayUtm').html(extractFromLabel('#inputUtmCustom'));

        // Marketing tab
        $('#displayAutoPilot').html(extractFromCheckbox('#checkboxAutopilot'));
        $('#displayCpc').html('@currencyService.GetGlobalCurrencySymbol()' + extractFromLabel('#inputCpc'));
        $('#displayBidStrategy').html(extractFromCheckableGroup('.radioBidStrategy'));
        $('#displayDelivery').html(extractFromCheckableGroup('.radioDelivery'));
        $('#displayBudget').html(extractBudget('#inputBudget', '#selectBudgetModel'));
        $('#displayBudgetDaily').html(extractBudgetDaily('#inputBudgetDaily', '#inputBudgetDailyInfinite'));

        // Targeting tab
        $('#displayLocations').html(extractFromCheckableGroup('.checkboxLocation'));
        $('#displayDevices').html(extractFromCheckableGroup('.checkboxDevice'));
        $('#displayOperatingSystems').html(extractFromCheckableGroup('.checkboxOperatingSystem'));

        // Schedule tab
        $('#displayStartDate').html(extractFromDatePicker('#datetimeStartDate'));
        $('#displayEndDate').html(extractEndDate('#datetimeEndDate', '#checkboxIgnoreEndDate'));

        // Ad Groups
        $('#displayAdGroups').html(extractAdGroups('.hiddenAdGroupId'));
    }

    // Extracts the text from a select
    function extractFromSelect(id) {
        var index = $(id).get(0).selectedIndex;
        var options = $($(id).get(0).options);
        return $(options[index]).get(0).label;
    }

    // Extracts the text from a checkbox group
    function extractFromCheckableGroup(id) {
        let selectedLabels = [];
        $.each($(id), function (index, item) {
            if (item.checked) { selectedLabels.push(item.value); }
        });
        return formatStringArray(selectedLabels);
    }

    // Extracts the text from a label
    function extractFromLabel(id) {
        return $(id).get(0).value;
    }

    // Extracts active or inactive from a checkbox
    function extractFromCheckbox(id) {
        if ($(id).get(0).checked) {
            return "Active";
        } else {
            return "Inactive";
        }
    }

    // Extracts and formats our budget
    function extractBudget(idBudget, idBudgetModel) {
        let budget = extractFromLabel(idBudget);
        let model = extractFromSelect(idBudgetModel);
        return '@currencyService.GetGlobalCurrencySymbol()' + budget + " " + model;
    }

    // Extracts and formats our daily budget
    function extractBudgetDaily(idBudgetDaily, idBudgetDailyInfinite) {
        if ($(idBudgetDailyInfinite).get(0).checked) {
            return "None";
        } else {
            return '@currencyService.GetGlobalCurrencySymbol()' + extractFromLabel(idBudgetDaily);
        }
    }

    // Extracts a date from a date picker
    function extractFromDatePicker(id) {
        let epoch = $(id).get(0).valueAsNumber;
        return new Date(epoch).toLocaleString();
    }

    // Extracts and formats our end date
    function extractEndDate(idEndDate, idIgnoreEndDate) {
        if ($(idIgnoreEndDate).get(0).checked) {
            return "None";
        } else {
            return extractFromDatePicker(idEndDate);
        }
    }

    // Extracts and formats our ad group names
    function extractAdGroups(id) {
        let names = [];
        $.each($(id), function (index, item) {
            let name = $(item).attr('data-adgroup-name');
            if (name === null) { console.log('Error while getting name from ', item); }
            else { names.push(name); }
        });
        return formatStringArray(names);
    }

    // Formats a collection of strings
    function formatStringArray(array, noneString) {
        if (array.length > 1) {
            let result = ""
            for (let i = 0; i < array.length; i++) {
                result += array[i];
                if (i < array.length - 1) { result += ', '; }
            }
            return result;
        } else if (array.length == 1) {
            return array[0];
        } else if (noneString === null) {
            return "None";
        } else {
            return noneString;
        }
    }

</script>