@*
    Displays an overview of all campaigns in our viewmodel.
*@

@model CampaignOverviewViewModel
@{
    ViewData["Title"] = "Campaigns";
}
<main>

    <div class="campaign-overview">
        <div class="header">

            <!-- Title and searchbar -->
            <nav class="navbar justify-content-between mb-4">
                <h1>All Campaigns</h1>

                <!-- TODO This way of matching parameters is messy -->
                <form class="form-inline" id="formSearchCampaigns">
                    <input name="SearchQuery" class="form-control search" id="searchCampaigns" placeholder="Search" aria-label="Search" value="@Model.SearchQuery">
                </form>
            </nav>

            <!-- Contains the tabs top bar -->
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link active" data-target="#tabAll" data-toggle="tab" id="tabAllCount">All (...)</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-target="#tabActive" data-toggle="tab" id="tabActiveCount">Active (...)</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-target="#tabInactive" data-toggle="tab" id="tabInactiveCount">Inactive (...)</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-target="#tabPending" data-toggle="tab" id="tabPendingCount">Pending (...)</a>
                </li>
            </ul>
        </div>

        <!-- Contains the correct partial view for each tab. -->
        <div class="content tab-content">

            <!-- All the partial views, rendered upon document load. -->
            <div class="tab-pane active" id="tabAll">
                <div class="table-responsive tab-pane active" id="tabAll">
                    <table class="table table-striped">
                        <partial name="_TableHead" model="@Model" />
                        <tbody id="tabAllTableBody"></tbody>
                    </table>
                </div>
            </div>
            <div class="tab-pane" id="tabActive">
                <div class="table-responsive tab-pane active" id="tabActive">
                    <table class="table table-striped">
                        <partial name="_TableHead" model="@Model" />
                        <tbody id="tabActiveTableBody"></tbody>
                    </table>
                </div>
            </div>
            <div class="tab-pane" id="tabInactive">
                <div class="table-responsive tab-pane active" id="tabInactive">
                    <table class="table table-striped">
                        <partial name="_TableHead" model="@Model" />
                        <tbody id="tabInactiveTableBody"></tbody>
                    </table>
                </div>
            </div>
            <div class="tab-pane" id="tabPending">
                <div class="table-responsive tab-pane active" id="tabPending">
                    <table class="table table-striped" id="tableCampaigns">
                        <partial name="_TableHead" model="@Model" />
                        <tbody id="tabPendingTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Div in which our details partial view will open -->
        <div class="container sidemodal">
            <div class="modal right fade modal-right" id="modal-campaign-details" tabindex="-1" role="dialog" aria-labelledby="modalRightLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content" id="modal-details-content">
                        <!-- Empty to load partial view with jquery -->
                    </div>
                </div>
            </div>
        </div>

    </div>

</main>



@section Scripts  {

    <!-- Import campaign details scripts because partial view scripts won't be loaded otherwise -->
    @*<partial name="~/Views/CampaignDetails/_ScriptDetails.cshtml" />*@
    <!-- TODO Do we want to implement a solution like this? -->
    <!-- TODO Do we even want to have javascript at the bottom of the page? Isn't importing cleaner? -->

    <script type="text/javascript">

        // Global variables to ensure consistent sorting and searc query display across operations
        window.ColumnCampaignOverview = '@Model.Column';
        window.OrderCampaignOverview = '@Model.Order';

        // TODO DRY for fetch
        $(document).ready(function () {

            // TODO Is this the right location for this functionality?
            setMenuHighlight('@MenuItem.CampaignOverview');

            // Subscribe search campaign form submit
            subscribeFormSubmit('#formSearchCampaigns', loadTablesAsync);

            // Handles our model opening for the campaign details
            subscribeClickable('.click-open-details', function (event) {
                var campaignId = $(event.currentTarget).attr('data-campaign-id');
                doMethodAndProcess('@Url.Action("ShowCampaign", "CampaignDetails")?' +
                    new URLSearchParams({
                        id: campaignId
                    }), 'get', function (html) {
                        // TODO This might take a while, first show then fill?
                        $('#modal-details-content').html(html);
                        $('#modal-campaign-details').modal({ show: true });
                    });
            });

            // Subscribe delete button functionality
            subscribeClickable('.click-delete-campaign', function (event) {
                var campaignId = $(event.currentTarget).attr('data-campaign-id');
                $('.click-delete-campaign').attr('disabled, disabled');
                doMethodAndProcess('@Url.Action("Delete", "CampaignOverview")?' +
                    new URLSearchParams({
                        campaignId: campaignId,
                    }), 'delete', function () {
                        // Reload all tables because deleted entry can exist in multiple tab tables
                        // TODO Confirmation popup
                        loadTablesAsync();
                    });
            });

        });

            // Make us load all tables with default values
            loadTablesAsync();

        // TODO Ugly parameter passing, maybe this can be done more elegantly?
        // Handles the async loading
        function loadTablesAsync() {
            var query = $('#searchCampaigns')[0].value; // TODO This does not seem bulletproof!
            var column = window.ColumnCampaignOverview;
            var order = window.OrderCampaignOverview;

            loadTableAsync('@CampaignTableType.All', '#tabAllTableBody', '#tabAllCount', 'All', query, column, order);
            loadTableAsync('@CampaignTableType.Active', '#tabActiveTableBody', '#tabActiveCount', 'Active', query, column, order);
            loadTableAsync('@CampaignTableType.Inactive', '#tabInactiveTableBody', '#tabInactiveCount', 'Inactive', query, column, order);
            loadTableAsync('@CampaignTableType.Pending', '#tabPendingTableBody', '#tabPendingCount', 'Pending', query, column, order);
        }

        // Fetch call for generic table get request
        function loadTableAsync(tableType, tableBodyId, countId, tableName, query, column, order) {
            // Set count to ...
            $(countId).html(tableName + ' (...)');

            // Load view component async through controller html request
            doGetAndReplaceHtml('@Url.Action("GetCampaignTableViewComponent", "CampaignOverview")?'
                + new URLSearchParams({
                    table: tableType,
                    query: query,
                    column: column,
                    order: order
                }), tableBodyId);

            // Load count component async through controller html request
            doGetAndReplaceHtml('@Url.Action("GetCampaignCountViewComponent", "CampaignOverview")?'
                + new URLSearchParams({
                    table: tableType,
                    query: query,
                    column: column,
                    order: order
                }), countId);
        };

    </script>

}